#!/usr/bin/env python3

import json
import pdb
import sys

import requests


AGENDA_ITEM_URL = 'http://dev.hel.fi/paatokset/v1/agenda_item/'
# FIXME: Where is the parameter meeting__policymaker__origin_id documented?
CITY_COUNCIL_ID = '02900'
PAYLOAD = {'format': 'json', 'order_by': '-meeting__date',
           'meeting__policymaker__origin_id': CITY_COUNCIL_ID}

#DEMOCRACYOS_BASE_URL = 'https://finnish-democracyos.herokuapp.com/'
# FIXME: Local version
DEMOCRACYOS_BASE_URL = 'http://localhost:3000/'
DEMOCRACYOS_LAW_CREATE_URL = DEMOCRACYOS_BASE_URL + 'api/law/create'
DEMOCRACYOS_LOGIN_URL = DEMOCRACYOS_BASE_URL + 'signin'
DEMOCRACYOS_LOGOUT_URL = DEMOCRACYOS_BASE_URL + 'signout'

USERNAME = 'example@example.com'
PASSWORD = 'password'


# FIXME: Create a class for agenda items. The class should do correctness checking.


# FIXME: Log erroneous data but don't crash.
def agenda_item_to_activity_stream(agenda_item):
    # FIXME: Should we have less hardcoding and more reading of APIs here?
    ACTOR = {
        'objectType': 'decisionmaker',
        'id': 'urn:hel.fi:decisionmaker:02900',
        'displayName': {
            'fi': 'Kaupunginvaltuusto',
            'sv': 'Kommunfullm√§ktige',
            'en': 'City Council'
        },
        'url': 'http://dev.hel.fi/paatokset/paattaja/kvsto/'
    }

    issue = agenda_item['issue']
    display_name = issue['subject']
    summary = issue['summary']
    slug = issue['slug']
    # FIXME: Check that you picked the right timestamp.
    # FIXME: Check datetime for correctness.
    last_modified = agenda_item['last_modified_time']
    permalink = agenda_item['permalink']
    # FIXME: Check that the id is correct. It has one digit less than the example.
    agenda_item_id = str(agenda_item['id'])

    activity_stream = {
        'verb': 'add',
        'published': last_modified,
        'actor': ACTOR,
        'object': {
            'objectType': 'issue',
            'id': ''.join(['urn:hel.fi:issue:', slug]),
            'displayName': {
                'fi': display_name
            },
            'content': summary,
            'url': permalink
        },
        'target': {
            'objectType': 'meeting'
            ## FIXME: where is the meeting id? It is available from the url in agenda_item['meeting']['policymaker'] http://dev.hel.fi/paatokset/v1/policymaker/5/
            ## FIXME: Collect all policymaker urls, unique them, request them
            #'id': ''.join(['urn:hel.fi:meeting:', CITY_COUNCIL_ID, '-', 'FOOBAR'])
            ## FIXME: How to construct the url? The time is unclear.
            ## The following is just an example:
            #'url': 'http://dev.hel.fi/paatokset/paattaja/kvsto/2014/11/'
        },
        'result': {
            'objectType': 'agenda_item',
            'id': ''.join(['urn:hel.fi:agenda_item:', agenda_item_id]),
            # FIXME: url needs to be constructed, it might be permalink + missing target_url part
            'url': permalink,
            'displayName': {
                'fi': display_name
            }
        }
    }
    return activity_stream



# Use the following keys in json or params:
#      'id lawId title mediaTitle summary clauses source state',
#      'status open closed public draft deleted tag participants',
#      'upvotes downvotes abstentions createdAt updatedAt closingAt',
#      'publishedAt deletedAt votable clauseTruncationText links author authorUrl'
#
# corresponds to decisions api:
# lawId = issue.slug
# title = (not in use)
# mediaTitle = issue.subject
# summary = issue.summary
# clauses = ?
# source = permalink
# state = ?
# status = ?
# open = ?
# closed = ?
# public = true
# draft = ?
# deleted = ?
# tag = "Kaupunginvaltuusto"
# participants = ?
# upvotes = ?
# downvotes = ?
# abstentions = ?
# createdAt = origin_last_modified_time or (no need to specify)
# updatedAt = issue.last_modified_time or (no need to specify)
# closingAt = issue.latest_decision_date or (not in use)
# publishedAt = (no need to specify)
# deletedAt = (no need to specify)
# votable = ?
# clauseTruncationText = ?
# links = (here goes every dang link?)
# author = introducer or meeting.policymaker_name
# authorUrl = ?
def post_agenda_item(agenda_item):
    HEADERS = {'content-type': 'application/json'}

    issue = agenda_item['issue']
    payload = {
        'lawId': issue['slug'],
        'mediaTitle': issue['subject'],
        'summary': issue['summary'],
        'source': agenda_item['permalink'],
        'public': 'true',
        'tag': 'Kaupunginvaltuusto',
        'createdAt': agenda_item['origin_last_modified_time'],
        'updatedAt': issue['last_modified_time'],
        'closingAt': issue['latest_decision_date'],
        'publishedAt': agenda_item['origin_last_modified_time'],
        'author': agenda_item['introducer']
    }

    r = requests.post(DEMOCRACYOS_LAW_CREATE_URL, data=json.dumps(payload),
                      headers=HEADERS)
    print("here's the agenda post request")
    print(r)


def login_to_democracyos():
    HEADERS = {
        'accept': 'application/json',
        #'Host': 'finnish-democracyos.herokuapp.com',
        'Host': 'localhost:3000',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2; rv:10.0.1) Gecko/20100101 Firefox/10.0.1',
        #Accept-Language': 'en-US,en;q=0.5',
        #'X-CSRF-Token': 'qPnpT6I0MJOW6BlgK+favhcBb8Hmb0xOhy73A=',
        #'Referer': 'https://finnish-democracyos.herokuapp.com/signin',
        'Referer': 'http://localhost:3000',
        #'Content-Length': '66',
        #'X-Forwarded-For': '53.154.87.128',
        #'Via': '1.1 179.119.210.96',
        #'If-None-Match': 'q1wqvfkrq',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'content-type': 'application/json; charset=UTF-8',
        #'X-CSRF-Token': 'GgYUqL4tq9UbnjJvjqd0YyaLBvTktyzLWDrLM='
        'X-CSRF-Token': 'foobar'
    }


    payload = {
        'email': USERNAME,
        'password': PASSWORD
    }

    s = requests.Session()
    #s.auth = (USERNAME, PASSWORD)
    s.headers.update(HEADERS)
    print(s.headers)

    r_get = s.get(DEMOCRACYOS_LOGIN_URL)

    # FIXME: parse csrfToken out of the GET response

    print("here is the login get")
    #print(r_get)
    print(r_get.cookies)

    #r = s.post(DEMOCRACYOS_LOGIN_URL, data=json.dumps(payload))
    #r = s.post(DEMOCRACYOS_LOGIN_URL, data=payload, cookies=r_get.cookies)
    r = s.post(DEMOCRACYOS_LOGIN_URL, data=json.dumps(payload), cookies=r_get.cookies)
    #r = requests.post(DEMOCRACYOS_LOGIN_URL, data=json.dumps(payload),
    #                  headers=HEADERS)
    print("here's the login post")
    print(r)
    print(r.text)

    raw_headers = {
        'accept': 'application/json',
        'content-type': 'application/json; charset=UTF-8',
        #'referer': 'http://localhost:3000/signin',
        'connection': 'keep-alive'
    }
    r_raw = requests.post(DEMOCRACYOS_LOGIN_URL, data=json.dumps(payload),
                          headers=raw_headers)
    print(r_raw.text)

    pdb.set_trace()


def logout_from_democracyos():
    HEADERS = {'content-type': 'application/json'}

    #payload = {
    #    'username': USERNAME,
    #    'password': PASSWORD
    #}

    r = requests.get(DEMOCRACYOS_LOGOUT_URL, headers=HEADERS)
    print("here's the logout get")
    print(r)


r = requests.get(AGENDA_ITEM_URL, params=PAYLOAD)
try:
    response = r.json()
except ValueError as e:
    print(e, file=sys.stderr)

#print('starting to log in')
#login_to_democracyos()
#print('starting to post')
## FIXME: only :1 for now
#[post_agenda_item(agenda_item) for agenda_item in response['objects'][:1]]

activity_streams = [agenda_item_to_activity_stream(agenda_item)
                    for agenda_item in response['objects']]
print(json.dumps(activity_streams, sort_keys=True, indent=4,
      separators=(',', ': ')))


#def main(argv = None):
#    if argv is None:
#        argv = sys.argv
#
#
#if __name__ == "__main__":
#        sys.exit(main())
